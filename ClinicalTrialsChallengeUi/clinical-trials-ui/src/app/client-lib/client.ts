/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IFullStudyClient {
    get(nctIdentifier?: string | null | undefined): Observable<FullStudyDto>;
    search(paginationRequest_Skip?: number | undefined, paginationRequest_Take?: number | undefined, keywords?: string[] | null | undefined, location?: string | null | undefined, status?: string | null | undefined, gender?: string | null | undefined, dateOfBirth?: Date | null | undefined): Observable<FullStudyViewDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class FullStudyClient implements IFullStudyClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44331";
    }

    get(nctIdentifier?: string | null | undefined): Observable<FullStudyDto> {
        let url_ = this.baseUrl + "/FullStudy?";
        if (nctIdentifier !== undefined && nctIdentifier !== null)
            url_ += "nctIdentifier=" + encodeURIComponent("" + nctIdentifier) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<FullStudyDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FullStudyDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<FullStudyDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FullStudyDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FullStudyDto>(<any>null);
    }

    search(paginationRequest_Skip?: number | undefined, paginationRequest_Take?: number | undefined, keywords?: string[] | null | undefined, location?: string | null | undefined, status?: string | null | undefined, gender?: string | null | undefined, dateOfBirth?: Date | null | undefined): Observable<FullStudyViewDto[]> {
        let url_ = this.baseUrl + "/FullStudy/search?";
        if (paginationRequest_Skip === null)
            throw new Error("The parameter 'paginationRequest_Skip' cannot be null.");
        else if (paginationRequest_Skip !== undefined)
            url_ += "PaginationRequest.Skip=" + encodeURIComponent("" + paginationRequest_Skip) + "&";
        if (paginationRequest_Take === null)
            throw new Error("The parameter 'paginationRequest_Take' cannot be null.");
        else if (paginationRequest_Take !== undefined)
            url_ += "PaginationRequest.Take=" + encodeURIComponent("" + paginationRequest_Take) + "&";
        if (keywords !== undefined && keywords !== null)
            keywords && keywords.forEach(item => { url_ += "Keywords=" + encodeURIComponent("" + item) + "&"; });
        if (location !== undefined && location !== null)
            url_ += "Location=" + encodeURIComponent("" + location) + "&";
        if (status !== undefined && status !== null)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        if (gender !== undefined && gender !== null)
            url_ += "Gender=" + encodeURIComponent("" + gender) + "&";
        if (dateOfBirth !== undefined && dateOfBirth !== null)
            url_ += "DateOfBirth=" + encodeURIComponent(dateOfBirth ? "" + dateOfBirth.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<FullStudyViewDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<FullStudyViewDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<FullStudyViewDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FullStudyViewDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FullStudyViewDto[]>(<any>null);
    }
}

export interface IStatusClient {
    getStatuses(): Observable<Status[]>;
}

@Injectable({
    providedIn: 'root'
})
export class StatusClient implements IStatusClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44331";
    }

    getStatuses(): Observable<Status[]> {
        let url_ = this.baseUrl + "/Status/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStatuses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStatuses(<any>response_);
                } catch (e) {
                    return <Observable<Status[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Status[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetStatuses(response: HttpResponseBase): Observable<Status[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Status.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Status[]>(<any>null);
    }
}

export class FullStudyDto implements IFullStudyDto {
    protocolSection?: ProtocolsectionDto | null;
    derivedSection?: DerivedsectionDto | null;

    constructor(data?: IFullStudyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.protocolSection = _data["protocolSection"] ? ProtocolsectionDto.fromJS(_data["protocolSection"]) : <any>null;
            this.derivedSection = _data["derivedSection"] ? DerivedsectionDto.fromJS(_data["derivedSection"]) : <any>null;
        }
    }

    static fromJS(data: any): FullStudyDto {
        data = typeof data === 'object' ? data : {};
        let result = new FullStudyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["protocolSection"] = this.protocolSection ? this.protocolSection.toJSON() : <any>null;
        data["derivedSection"] = this.derivedSection ? this.derivedSection.toJSON() : <any>null;
        return data; 
    }
}

export interface IFullStudyDto {
    protocolSection?: ProtocolsectionDto | null;
    derivedSection?: DerivedsectionDto | null;
}

export class ProtocolsectionDto implements IProtocolsectionDto {
    identificationModule?: IdentificationmoduleDto | null;
    statusModule?: StatusmoduleDto | null;
    sponsorCollaboratorsModule?: SponsorcollaboratorsmoduleDto | null;
    oversightModule?: OversightmoduleDto | null;
    descriptionModule?: DescriptionmoduleDto | null;
    conditionsModule?: ConditionsmoduleDto | null;
    designModule?: DesignmoduleDto | null;
    armsInterventionsModule?: ArmsinterventionsmoduleDto | null;
    outcomesModule?: OutcomesmoduleDto | null;
    eligibilityModule?: EligibilitymoduleDto | null;
    contactsLocationsModule?: ContactslocationsmoduleDto | null;
    referencesModule?: ReferencesmoduleDto | null;

    constructor(data?: IProtocolsectionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.identificationModule = _data["identificationModule"] ? IdentificationmoduleDto.fromJS(_data["identificationModule"]) : <any>null;
            this.statusModule = _data["statusModule"] ? StatusmoduleDto.fromJS(_data["statusModule"]) : <any>null;
            this.sponsorCollaboratorsModule = _data["sponsorCollaboratorsModule"] ? SponsorcollaboratorsmoduleDto.fromJS(_data["sponsorCollaboratorsModule"]) : <any>null;
            this.oversightModule = _data["oversightModule"] ? OversightmoduleDto.fromJS(_data["oversightModule"]) : <any>null;
            this.descriptionModule = _data["descriptionModule"] ? DescriptionmoduleDto.fromJS(_data["descriptionModule"]) : <any>null;
            this.conditionsModule = _data["conditionsModule"] ? ConditionsmoduleDto.fromJS(_data["conditionsModule"]) : <any>null;
            this.designModule = _data["designModule"] ? DesignmoduleDto.fromJS(_data["designModule"]) : <any>null;
            this.armsInterventionsModule = _data["armsInterventionsModule"] ? ArmsinterventionsmoduleDto.fromJS(_data["armsInterventionsModule"]) : <any>null;
            this.outcomesModule = _data["outcomesModule"] ? OutcomesmoduleDto.fromJS(_data["outcomesModule"]) : <any>null;
            this.eligibilityModule = _data["eligibilityModule"] ? EligibilitymoduleDto.fromJS(_data["eligibilityModule"]) : <any>null;
            this.contactsLocationsModule = _data["contactsLocationsModule"] ? ContactslocationsmoduleDto.fromJS(_data["contactsLocationsModule"]) : <any>null;
            this.referencesModule = _data["referencesModule"] ? ReferencesmoduleDto.fromJS(_data["referencesModule"]) : <any>null;
        }
    }

    static fromJS(data: any): ProtocolsectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProtocolsectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identificationModule"] = this.identificationModule ? this.identificationModule.toJSON() : <any>null;
        data["statusModule"] = this.statusModule ? this.statusModule.toJSON() : <any>null;
        data["sponsorCollaboratorsModule"] = this.sponsorCollaboratorsModule ? this.sponsorCollaboratorsModule.toJSON() : <any>null;
        data["oversightModule"] = this.oversightModule ? this.oversightModule.toJSON() : <any>null;
        data["descriptionModule"] = this.descriptionModule ? this.descriptionModule.toJSON() : <any>null;
        data["conditionsModule"] = this.conditionsModule ? this.conditionsModule.toJSON() : <any>null;
        data["designModule"] = this.designModule ? this.designModule.toJSON() : <any>null;
        data["armsInterventionsModule"] = this.armsInterventionsModule ? this.armsInterventionsModule.toJSON() : <any>null;
        data["outcomesModule"] = this.outcomesModule ? this.outcomesModule.toJSON() : <any>null;
        data["eligibilityModule"] = this.eligibilityModule ? this.eligibilityModule.toJSON() : <any>null;
        data["contactsLocationsModule"] = this.contactsLocationsModule ? this.contactsLocationsModule.toJSON() : <any>null;
        data["referencesModule"] = this.referencesModule ? this.referencesModule.toJSON() : <any>null;
        return data; 
    }
}

export interface IProtocolsectionDto {
    identificationModule?: IdentificationmoduleDto | null;
    statusModule?: StatusmoduleDto | null;
    sponsorCollaboratorsModule?: SponsorcollaboratorsmoduleDto | null;
    oversightModule?: OversightmoduleDto | null;
    descriptionModule?: DescriptionmoduleDto | null;
    conditionsModule?: ConditionsmoduleDto | null;
    designModule?: DesignmoduleDto | null;
    armsInterventionsModule?: ArmsinterventionsmoduleDto | null;
    outcomesModule?: OutcomesmoduleDto | null;
    eligibilityModule?: EligibilitymoduleDto | null;
    contactsLocationsModule?: ContactslocationsmoduleDto | null;
    referencesModule?: ReferencesmoduleDto | null;
}

export class IdentificationmoduleDto implements IIdentificationmoduleDto {
    nctId?: string | null;
    orgStudyIdInfo?: OrgstudyidinfoDto | null;
    secondaryIdInfoList?: SecondaryidinfolistDto | null;
    organization?: OrganizationDto | null;
    briefTitle?: string | null;
    officialTitle?: string | null;
    acronym?: string | null;

    constructor(data?: IIdentificationmoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nctId = _data["nctId"] !== undefined ? _data["nctId"] : <any>null;
            this.orgStudyIdInfo = _data["orgStudyIdInfo"] ? OrgstudyidinfoDto.fromJS(_data["orgStudyIdInfo"]) : <any>null;
            this.secondaryIdInfoList = _data["secondaryIdInfoList"] ? SecondaryidinfolistDto.fromJS(_data["secondaryIdInfoList"]) : <any>null;
            this.organization = _data["organization"] ? OrganizationDto.fromJS(_data["organization"]) : <any>null;
            this.briefTitle = _data["briefTitle"] !== undefined ? _data["briefTitle"] : <any>null;
            this.officialTitle = _data["officialTitle"] !== undefined ? _data["officialTitle"] : <any>null;
            this.acronym = _data["acronym"] !== undefined ? _data["acronym"] : <any>null;
        }
    }

    static fromJS(data: any): IdentificationmoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdentificationmoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nctId"] = this.nctId !== undefined ? this.nctId : <any>null;
        data["orgStudyIdInfo"] = this.orgStudyIdInfo ? this.orgStudyIdInfo.toJSON() : <any>null;
        data["secondaryIdInfoList"] = this.secondaryIdInfoList ? this.secondaryIdInfoList.toJSON() : <any>null;
        data["organization"] = this.organization ? this.organization.toJSON() : <any>null;
        data["briefTitle"] = this.briefTitle !== undefined ? this.briefTitle : <any>null;
        data["officialTitle"] = this.officialTitle !== undefined ? this.officialTitle : <any>null;
        data["acronym"] = this.acronym !== undefined ? this.acronym : <any>null;
        return data; 
    }
}

export interface IIdentificationmoduleDto {
    nctId?: string | null;
    orgStudyIdInfo?: OrgstudyidinfoDto | null;
    secondaryIdInfoList?: SecondaryidinfolistDto | null;
    organization?: OrganizationDto | null;
    briefTitle?: string | null;
    officialTitle?: string | null;
    acronym?: string | null;
}

export class OrgstudyidinfoDto implements IOrgstudyidinfoDto {
    orgStudyId?: string | null;

    constructor(data?: IOrgstudyidinfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orgStudyId = _data["orgStudyId"] !== undefined ? _data["orgStudyId"] : <any>null;
        }
    }

    static fromJS(data: any): OrgstudyidinfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrgstudyidinfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orgStudyId"] = this.orgStudyId !== undefined ? this.orgStudyId : <any>null;
        return data; 
    }
}

export interface IOrgstudyidinfoDto {
    orgStudyId?: string | null;
}

export class SecondaryidinfolistDto implements ISecondaryidinfolistDto {
    secondaryIdInfo?: SecondaryidinfoDto[] | null;

    constructor(data?: ISecondaryidinfolistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["secondaryIdInfo"])) {
                this.secondaryIdInfo = [] as any;
                for (let item of _data["secondaryIdInfo"])
                    this.secondaryIdInfo!.push(SecondaryidinfoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SecondaryidinfolistDto {
        data = typeof data === 'object' ? data : {};
        let result = new SecondaryidinfolistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.secondaryIdInfo)) {
            data["secondaryIdInfo"] = [];
            for (let item of this.secondaryIdInfo)
                data["secondaryIdInfo"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISecondaryidinfolistDto {
    secondaryIdInfo?: SecondaryidinfoDto[] | null;
}

export class SecondaryidinfoDto implements ISecondaryidinfoDto {
    secondaryId?: string | null;
    secondaryIdType?: string | null;
    secondaryIdDomain?: string | null;

    constructor(data?: ISecondaryidinfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.secondaryId = _data["secondaryId"] !== undefined ? _data["secondaryId"] : <any>null;
            this.secondaryIdType = _data["secondaryIdType"] !== undefined ? _data["secondaryIdType"] : <any>null;
            this.secondaryIdDomain = _data["secondaryIdDomain"] !== undefined ? _data["secondaryIdDomain"] : <any>null;
        }
    }

    static fromJS(data: any): SecondaryidinfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new SecondaryidinfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["secondaryId"] = this.secondaryId !== undefined ? this.secondaryId : <any>null;
        data["secondaryIdType"] = this.secondaryIdType !== undefined ? this.secondaryIdType : <any>null;
        data["secondaryIdDomain"] = this.secondaryIdDomain !== undefined ? this.secondaryIdDomain : <any>null;
        return data; 
    }
}

export interface ISecondaryidinfoDto {
    secondaryId?: string | null;
    secondaryIdType?: string | null;
    secondaryIdDomain?: string | null;
}

export class OrganizationDto implements IOrganizationDto {
    orgFullName?: string | null;
    orgClass?: string | null;

    constructor(data?: IOrganizationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orgFullName = _data["orgFullName"] !== undefined ? _data["orgFullName"] : <any>null;
            this.orgClass = _data["orgClass"] !== undefined ? _data["orgClass"] : <any>null;
        }
    }

    static fromJS(data: any): OrganizationDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orgFullName"] = this.orgFullName !== undefined ? this.orgFullName : <any>null;
        data["orgClass"] = this.orgClass !== undefined ? this.orgClass : <any>null;
        return data; 
    }
}

export interface IOrganizationDto {
    orgFullName?: string | null;
    orgClass?: string | null;
}

export class StatusmoduleDto implements IStatusmoduleDto {
    statusVerifiedDate?: string | null;
    overallStatus?: string | null;
    expandedAccessInfo?: ExpandedaccessinfoDto | null;
    startDateStruct?: StartdatestructDto | null;
    primaryCompletionDateStruct?: PrimarycompletiondatestructDto | null;
    completionDateStruct?: CompletiondatestructDto | null;
    studyFirstSubmitDate?: string | null;
    studyFirstSubmitQCDate?: string | null;
    studyFirstPostDateStruct?: StudyfirstpostdatestructDto | null;
    lastUpdateSubmitDate?: string | null;
    lastUpdatePostDateStruct?: LastupdatepostdatestructDto | null;

    constructor(data?: IStatusmoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusVerifiedDate = _data["statusVerifiedDate"] !== undefined ? _data["statusVerifiedDate"] : <any>null;
            this.overallStatus = _data["overallStatus"] !== undefined ? _data["overallStatus"] : <any>null;
            this.expandedAccessInfo = _data["expandedAccessInfo"] ? ExpandedaccessinfoDto.fromJS(_data["expandedAccessInfo"]) : <any>null;
            this.startDateStruct = _data["startDateStruct"] ? StartdatestructDto.fromJS(_data["startDateStruct"]) : <any>null;
            this.primaryCompletionDateStruct = _data["primaryCompletionDateStruct"] ? PrimarycompletiondatestructDto.fromJS(_data["primaryCompletionDateStruct"]) : <any>null;
            this.completionDateStruct = _data["completionDateStruct"] ? CompletiondatestructDto.fromJS(_data["completionDateStruct"]) : <any>null;
            this.studyFirstSubmitDate = _data["studyFirstSubmitDate"] !== undefined ? _data["studyFirstSubmitDate"] : <any>null;
            this.studyFirstSubmitQCDate = _data["studyFirstSubmitQCDate"] !== undefined ? _data["studyFirstSubmitQCDate"] : <any>null;
            this.studyFirstPostDateStruct = _data["studyFirstPostDateStruct"] ? StudyfirstpostdatestructDto.fromJS(_data["studyFirstPostDateStruct"]) : <any>null;
            this.lastUpdateSubmitDate = _data["lastUpdateSubmitDate"] !== undefined ? _data["lastUpdateSubmitDate"] : <any>null;
            this.lastUpdatePostDateStruct = _data["lastUpdatePostDateStruct"] ? LastupdatepostdatestructDto.fromJS(_data["lastUpdatePostDateStruct"]) : <any>null;
        }
    }

    static fromJS(data: any): StatusmoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new StatusmoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusVerifiedDate"] = this.statusVerifiedDate !== undefined ? this.statusVerifiedDate : <any>null;
        data["overallStatus"] = this.overallStatus !== undefined ? this.overallStatus : <any>null;
        data["expandedAccessInfo"] = this.expandedAccessInfo ? this.expandedAccessInfo.toJSON() : <any>null;
        data["startDateStruct"] = this.startDateStruct ? this.startDateStruct.toJSON() : <any>null;
        data["primaryCompletionDateStruct"] = this.primaryCompletionDateStruct ? this.primaryCompletionDateStruct.toJSON() : <any>null;
        data["completionDateStruct"] = this.completionDateStruct ? this.completionDateStruct.toJSON() : <any>null;
        data["studyFirstSubmitDate"] = this.studyFirstSubmitDate !== undefined ? this.studyFirstSubmitDate : <any>null;
        data["studyFirstSubmitQCDate"] = this.studyFirstSubmitQCDate !== undefined ? this.studyFirstSubmitQCDate : <any>null;
        data["studyFirstPostDateStruct"] = this.studyFirstPostDateStruct ? this.studyFirstPostDateStruct.toJSON() : <any>null;
        data["lastUpdateSubmitDate"] = this.lastUpdateSubmitDate !== undefined ? this.lastUpdateSubmitDate : <any>null;
        data["lastUpdatePostDateStruct"] = this.lastUpdatePostDateStruct ? this.lastUpdatePostDateStruct.toJSON() : <any>null;
        return data; 
    }
}

export interface IStatusmoduleDto {
    statusVerifiedDate?: string | null;
    overallStatus?: string | null;
    expandedAccessInfo?: ExpandedaccessinfoDto | null;
    startDateStruct?: StartdatestructDto | null;
    primaryCompletionDateStruct?: PrimarycompletiondatestructDto | null;
    completionDateStruct?: CompletiondatestructDto | null;
    studyFirstSubmitDate?: string | null;
    studyFirstSubmitQCDate?: string | null;
    studyFirstPostDateStruct?: StudyfirstpostdatestructDto | null;
    lastUpdateSubmitDate?: string | null;
    lastUpdatePostDateStruct?: LastupdatepostdatestructDto | null;
}

export class ExpandedaccessinfoDto implements IExpandedaccessinfoDto {
    hasExpandedAccess?: string | null;

    constructor(data?: IExpandedaccessinfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hasExpandedAccess = _data["hasExpandedAccess"] !== undefined ? _data["hasExpandedAccess"] : <any>null;
        }
    }

    static fromJS(data: any): ExpandedaccessinfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExpandedaccessinfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasExpandedAccess"] = this.hasExpandedAccess !== undefined ? this.hasExpandedAccess : <any>null;
        return data; 
    }
}

export interface IExpandedaccessinfoDto {
    hasExpandedAccess?: string | null;
}

export class StartdatestructDto implements IStartdatestructDto {
    startDate?: string | null;
    startDateType?: string | null;

    constructor(data?: IStartdatestructDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["startDate"] !== undefined ? _data["startDate"] : <any>null;
            this.startDateType = _data["startDateType"] !== undefined ? _data["startDateType"] : <any>null;
        }
    }

    static fromJS(data: any): StartdatestructDto {
        data = typeof data === 'object' ? data : {};
        let result = new StartdatestructDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate !== undefined ? this.startDate : <any>null;
        data["startDateType"] = this.startDateType !== undefined ? this.startDateType : <any>null;
        return data; 
    }
}

export interface IStartdatestructDto {
    startDate?: string | null;
    startDateType?: string | null;
}

export class PrimarycompletiondatestructDto implements IPrimarycompletiondatestructDto {
    primaryCompletionDate?: string | null;
    primaryCompletionDateType?: string | null;

    constructor(data?: IPrimarycompletiondatestructDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.primaryCompletionDate = _data["primaryCompletionDate"] !== undefined ? _data["primaryCompletionDate"] : <any>null;
            this.primaryCompletionDateType = _data["primaryCompletionDateType"] !== undefined ? _data["primaryCompletionDateType"] : <any>null;
        }
    }

    static fromJS(data: any): PrimarycompletiondatestructDto {
        data = typeof data === 'object' ? data : {};
        let result = new PrimarycompletiondatestructDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["primaryCompletionDate"] = this.primaryCompletionDate !== undefined ? this.primaryCompletionDate : <any>null;
        data["primaryCompletionDateType"] = this.primaryCompletionDateType !== undefined ? this.primaryCompletionDateType : <any>null;
        return data; 
    }
}

export interface IPrimarycompletiondatestructDto {
    primaryCompletionDate?: string | null;
    primaryCompletionDateType?: string | null;
}

export class CompletiondatestructDto implements ICompletiondatestructDto {
    completionDate?: string | null;
    completionDateType?: string | null;

    constructor(data?: ICompletiondatestructDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.completionDate = _data["completionDate"] !== undefined ? _data["completionDate"] : <any>null;
            this.completionDateType = _data["completionDateType"] !== undefined ? _data["completionDateType"] : <any>null;
        }
    }

    static fromJS(data: any): CompletiondatestructDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompletiondatestructDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completionDate"] = this.completionDate !== undefined ? this.completionDate : <any>null;
        data["completionDateType"] = this.completionDateType !== undefined ? this.completionDateType : <any>null;
        return data; 
    }
}

export interface ICompletiondatestructDto {
    completionDate?: string | null;
    completionDateType?: string | null;
}

export class StudyfirstpostdatestructDto implements IStudyfirstpostdatestructDto {
    studyFirstPostDate?: string | null;
    studyFirstPostDateType?: string | null;

    constructor(data?: IStudyfirstpostdatestructDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.studyFirstPostDate = _data["studyFirstPostDate"] !== undefined ? _data["studyFirstPostDate"] : <any>null;
            this.studyFirstPostDateType = _data["studyFirstPostDateType"] !== undefined ? _data["studyFirstPostDateType"] : <any>null;
        }
    }

    static fromJS(data: any): StudyfirstpostdatestructDto {
        data = typeof data === 'object' ? data : {};
        let result = new StudyfirstpostdatestructDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["studyFirstPostDate"] = this.studyFirstPostDate !== undefined ? this.studyFirstPostDate : <any>null;
        data["studyFirstPostDateType"] = this.studyFirstPostDateType !== undefined ? this.studyFirstPostDateType : <any>null;
        return data; 
    }
}

export interface IStudyfirstpostdatestructDto {
    studyFirstPostDate?: string | null;
    studyFirstPostDateType?: string | null;
}

export class LastupdatepostdatestructDto implements ILastupdatepostdatestructDto {
    lastUpdatePostDate?: string | null;
    lastUpdatePostDateType?: string | null;

    constructor(data?: ILastupdatepostdatestructDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lastUpdatePostDate = _data["lastUpdatePostDate"] !== undefined ? _data["lastUpdatePostDate"] : <any>null;
            this.lastUpdatePostDateType = _data["lastUpdatePostDateType"] !== undefined ? _data["lastUpdatePostDateType"] : <any>null;
        }
    }

    static fromJS(data: any): LastupdatepostdatestructDto {
        data = typeof data === 'object' ? data : {};
        let result = new LastupdatepostdatestructDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdatePostDate"] = this.lastUpdatePostDate !== undefined ? this.lastUpdatePostDate : <any>null;
        data["lastUpdatePostDateType"] = this.lastUpdatePostDateType !== undefined ? this.lastUpdatePostDateType : <any>null;
        return data; 
    }
}

export interface ILastupdatepostdatestructDto {
    lastUpdatePostDate?: string | null;
    lastUpdatePostDateType?: string | null;
}

export class SponsorcollaboratorsmoduleDto implements ISponsorcollaboratorsmoduleDto {
    responsibleParty?: ResponsiblepartyDto | null;
    leadSponsor?: LeadsponsorDto | null;

    constructor(data?: ISponsorcollaboratorsmoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.responsibleParty = _data["responsibleParty"] ? ResponsiblepartyDto.fromJS(_data["responsibleParty"]) : <any>null;
            this.leadSponsor = _data["leadSponsor"] ? LeadsponsorDto.fromJS(_data["leadSponsor"]) : <any>null;
        }
    }

    static fromJS(data: any): SponsorcollaboratorsmoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new SponsorcollaboratorsmoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["responsibleParty"] = this.responsibleParty ? this.responsibleParty.toJSON() : <any>null;
        data["leadSponsor"] = this.leadSponsor ? this.leadSponsor.toJSON() : <any>null;
        return data; 
    }
}

export interface ISponsorcollaboratorsmoduleDto {
    responsibleParty?: ResponsiblepartyDto | null;
    leadSponsor?: LeadsponsorDto | null;
}

export class ResponsiblepartyDto implements IResponsiblepartyDto {
    responsiblePartyType?: string | null;
    responsiblePartyInvestigatorFullName?: string | null;
    responsiblePartyInvestigatorTitle?: string | null;
    responsiblePartyInvestigatorAffiliation?: string | null;

    constructor(data?: IResponsiblepartyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.responsiblePartyType = _data["responsiblePartyType"] !== undefined ? _data["responsiblePartyType"] : <any>null;
            this.responsiblePartyInvestigatorFullName = _data["responsiblePartyInvestigatorFullName"] !== undefined ? _data["responsiblePartyInvestigatorFullName"] : <any>null;
            this.responsiblePartyInvestigatorTitle = _data["responsiblePartyInvestigatorTitle"] !== undefined ? _data["responsiblePartyInvestigatorTitle"] : <any>null;
            this.responsiblePartyInvestigatorAffiliation = _data["responsiblePartyInvestigatorAffiliation"] !== undefined ? _data["responsiblePartyInvestigatorAffiliation"] : <any>null;
        }
    }

    static fromJS(data: any): ResponsiblepartyDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponsiblepartyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["responsiblePartyType"] = this.responsiblePartyType !== undefined ? this.responsiblePartyType : <any>null;
        data["responsiblePartyInvestigatorFullName"] = this.responsiblePartyInvestigatorFullName !== undefined ? this.responsiblePartyInvestigatorFullName : <any>null;
        data["responsiblePartyInvestigatorTitle"] = this.responsiblePartyInvestigatorTitle !== undefined ? this.responsiblePartyInvestigatorTitle : <any>null;
        data["responsiblePartyInvestigatorAffiliation"] = this.responsiblePartyInvestigatorAffiliation !== undefined ? this.responsiblePartyInvestigatorAffiliation : <any>null;
        return data; 
    }
}

export interface IResponsiblepartyDto {
    responsiblePartyType?: string | null;
    responsiblePartyInvestigatorFullName?: string | null;
    responsiblePartyInvestigatorTitle?: string | null;
    responsiblePartyInvestigatorAffiliation?: string | null;
}

export class LeadsponsorDto implements ILeadsponsorDto {
    leadSponsorName?: string | null;
    leadSponsorClass?: string | null;

    constructor(data?: ILeadsponsorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.leadSponsorName = _data["leadSponsorName"] !== undefined ? _data["leadSponsorName"] : <any>null;
            this.leadSponsorClass = _data["leadSponsorClass"] !== undefined ? _data["leadSponsorClass"] : <any>null;
        }
    }

    static fromJS(data: any): LeadsponsorDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeadsponsorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["leadSponsorName"] = this.leadSponsorName !== undefined ? this.leadSponsorName : <any>null;
        data["leadSponsorClass"] = this.leadSponsorClass !== undefined ? this.leadSponsorClass : <any>null;
        return data; 
    }
}

export interface ILeadsponsorDto {
    leadSponsorName?: string | null;
    leadSponsorClass?: string | null;
}

export class OversightmoduleDto implements IOversightmoduleDto {
    oversightHasDMC?: string | null;

    constructor(data?: IOversightmoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oversightHasDMC = _data["oversightHasDMC"] !== undefined ? _data["oversightHasDMC"] : <any>null;
        }
    }

    static fromJS(data: any): OversightmoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new OversightmoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oversightHasDMC"] = this.oversightHasDMC !== undefined ? this.oversightHasDMC : <any>null;
        return data; 
    }
}

export interface IOversightmoduleDto {
    oversightHasDMC?: string | null;
}

export class DescriptionmoduleDto implements IDescriptionmoduleDto {
    briefSummary?: string | null;
    detailedDescription?: string | null;

    constructor(data?: IDescriptionmoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.briefSummary = _data["briefSummary"] !== undefined ? _data["briefSummary"] : <any>null;
            this.detailedDescription = _data["detailedDescription"] !== undefined ? _data["detailedDescription"] : <any>null;
        }
    }

    static fromJS(data: any): DescriptionmoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new DescriptionmoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["briefSummary"] = this.briefSummary !== undefined ? this.briefSummary : <any>null;
        data["detailedDescription"] = this.detailedDescription !== undefined ? this.detailedDescription : <any>null;
        return data; 
    }
}

export interface IDescriptionmoduleDto {
    briefSummary?: string | null;
    detailedDescription?: string | null;
}

export class ConditionsmoduleDto implements IConditionsmoduleDto {
    conditionList?: ConditionlistDto | null;
    keywordList?: KeywordlistDto | null;

    constructor(data?: IConditionsmoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.conditionList = _data["conditionList"] ? ConditionlistDto.fromJS(_data["conditionList"]) : <any>null;
            this.keywordList = _data["keywordList"] ? KeywordlistDto.fromJS(_data["keywordList"]) : <any>null;
        }
    }

    static fromJS(data: any): ConditionsmoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionsmoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conditionList"] = this.conditionList ? this.conditionList.toJSON() : <any>null;
        data["keywordList"] = this.keywordList ? this.keywordList.toJSON() : <any>null;
        return data; 
    }
}

export interface IConditionsmoduleDto {
    conditionList?: ConditionlistDto | null;
    keywordList?: KeywordlistDto | null;
}

export class ConditionlistDto implements IConditionlistDto {
    condition?: string[] | null;

    constructor(data?: IConditionlistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["condition"])) {
                this.condition = [] as any;
                for (let item of _data["condition"])
                    this.condition!.push(item);
            }
        }
    }

    static fromJS(data: any): ConditionlistDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionlistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.condition)) {
            data["condition"] = [];
            for (let item of this.condition)
                data["condition"].push(item);
        }
        return data; 
    }
}

export interface IConditionlistDto {
    condition?: string[] | null;
}

export class KeywordlistDto implements IKeywordlistDto {
    keyword?: string[] | null;

    constructor(data?: IKeywordlistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["keyword"])) {
                this.keyword = [] as any;
                for (let item of _data["keyword"])
                    this.keyword!.push(item);
            }
        }
    }

    static fromJS(data: any): KeywordlistDto {
        data = typeof data === 'object' ? data : {};
        let result = new KeywordlistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.keyword)) {
            data["keyword"] = [];
            for (let item of this.keyword)
                data["keyword"].push(item);
        }
        return data; 
    }
}

export interface IKeywordlistDto {
    keyword?: string[] | null;
}

export class DesignmoduleDto implements IDesignmoduleDto {
    studyType?: string | null;
    patientRegistry?: string | null;
    targetDuration?: string | null;
    designInfo?: DesigninfoDto | null;
    enrollmentInfo?: EnrollmentinfoDto | null;

    constructor(data?: IDesignmoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.studyType = _data["studyType"] !== undefined ? _data["studyType"] : <any>null;
            this.patientRegistry = _data["patientRegistry"] !== undefined ? _data["patientRegistry"] : <any>null;
            this.targetDuration = _data["targetDuration"] !== undefined ? _data["targetDuration"] : <any>null;
            this.designInfo = _data["designInfo"] ? DesigninfoDto.fromJS(_data["designInfo"]) : <any>null;
            this.enrollmentInfo = _data["enrollmentInfo"] ? EnrollmentinfoDto.fromJS(_data["enrollmentInfo"]) : <any>null;
        }
    }

    static fromJS(data: any): DesignmoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new DesignmoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["studyType"] = this.studyType !== undefined ? this.studyType : <any>null;
        data["patientRegistry"] = this.patientRegistry !== undefined ? this.patientRegistry : <any>null;
        data["targetDuration"] = this.targetDuration !== undefined ? this.targetDuration : <any>null;
        data["designInfo"] = this.designInfo ? this.designInfo.toJSON() : <any>null;
        data["enrollmentInfo"] = this.enrollmentInfo ? this.enrollmentInfo.toJSON() : <any>null;
        return data; 
    }
}

export interface IDesignmoduleDto {
    studyType?: string | null;
    patientRegistry?: string | null;
    targetDuration?: string | null;
    designInfo?: DesigninfoDto | null;
    enrollmentInfo?: EnrollmentinfoDto | null;
}

export class DesigninfoDto implements IDesigninfoDto {
    designObservationalModelList?: DesignobservationalmodellistDto | null;
    designTimePerspectiveList?: DesigntimeperspectivelistDto | null;

    constructor(data?: IDesigninfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.designObservationalModelList = _data["designObservationalModelList"] ? DesignobservationalmodellistDto.fromJS(_data["designObservationalModelList"]) : <any>null;
            this.designTimePerspectiveList = _data["designTimePerspectiveList"] ? DesigntimeperspectivelistDto.fromJS(_data["designTimePerspectiveList"]) : <any>null;
        }
    }

    static fromJS(data: any): DesigninfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new DesigninfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["designObservationalModelList"] = this.designObservationalModelList ? this.designObservationalModelList.toJSON() : <any>null;
        data["designTimePerspectiveList"] = this.designTimePerspectiveList ? this.designTimePerspectiveList.toJSON() : <any>null;
        return data; 
    }
}

export interface IDesigninfoDto {
    designObservationalModelList?: DesignobservationalmodellistDto | null;
    designTimePerspectiveList?: DesigntimeperspectivelistDto | null;
}

export class DesignobservationalmodellistDto implements IDesignobservationalmodellistDto {
    designObservationalModel?: string[] | null;

    constructor(data?: IDesignobservationalmodellistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["designObservationalModel"])) {
                this.designObservationalModel = [] as any;
                for (let item of _data["designObservationalModel"])
                    this.designObservationalModel!.push(item);
            }
        }
    }

    static fromJS(data: any): DesignobservationalmodellistDto {
        data = typeof data === 'object' ? data : {};
        let result = new DesignobservationalmodellistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.designObservationalModel)) {
            data["designObservationalModel"] = [];
            for (let item of this.designObservationalModel)
                data["designObservationalModel"].push(item);
        }
        return data; 
    }
}

export interface IDesignobservationalmodellistDto {
    designObservationalModel?: string[] | null;
}

export class DesigntimeperspectivelistDto implements IDesigntimeperspectivelistDto {
    designTimePerspective?: string[] | null;

    constructor(data?: IDesigntimeperspectivelistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["designTimePerspective"])) {
                this.designTimePerspective = [] as any;
                for (let item of _data["designTimePerspective"])
                    this.designTimePerspective!.push(item);
            }
        }
    }

    static fromJS(data: any): DesigntimeperspectivelistDto {
        data = typeof data === 'object' ? data : {};
        let result = new DesigntimeperspectivelistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.designTimePerspective)) {
            data["designTimePerspective"] = [];
            for (let item of this.designTimePerspective)
                data["designTimePerspective"].push(item);
        }
        return data; 
    }
}

export interface IDesigntimeperspectivelistDto {
    designTimePerspective?: string[] | null;
}

export class EnrollmentinfoDto implements IEnrollmentinfoDto {
    enrollmentCount?: string | null;
    enrollmentType?: string | null;

    constructor(data?: IEnrollmentinfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enrollmentCount = _data["enrollmentCount"] !== undefined ? _data["enrollmentCount"] : <any>null;
            this.enrollmentType = _data["enrollmentType"] !== undefined ? _data["enrollmentType"] : <any>null;
        }
    }

    static fromJS(data: any): EnrollmentinfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnrollmentinfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enrollmentCount"] = this.enrollmentCount !== undefined ? this.enrollmentCount : <any>null;
        data["enrollmentType"] = this.enrollmentType !== undefined ? this.enrollmentType : <any>null;
        return data; 
    }
}

export interface IEnrollmentinfoDto {
    enrollmentCount?: string | null;
    enrollmentType?: string | null;
}

export class ArmsinterventionsmoduleDto implements IArmsinterventionsmoduleDto {
    armGroupList?: ArmgrouplistDto | null;

    constructor(data?: IArmsinterventionsmoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.armGroupList = _data["armGroupList"] ? ArmgrouplistDto.fromJS(_data["armGroupList"]) : <any>null;
        }
    }

    static fromJS(data: any): ArmsinterventionsmoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ArmsinterventionsmoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["armGroupList"] = this.armGroupList ? this.armGroupList.toJSON() : <any>null;
        return data; 
    }
}

export interface IArmsinterventionsmoduleDto {
    armGroupList?: ArmgrouplistDto | null;
}

export class ArmgrouplistDto implements IArmgrouplistDto {
    armGroup?: ArmgroupDto[] | null;

    constructor(data?: IArmgrouplistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["armGroup"])) {
                this.armGroup = [] as any;
                for (let item of _data["armGroup"])
                    this.armGroup!.push(ArmgroupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ArmgrouplistDto {
        data = typeof data === 'object' ? data : {};
        let result = new ArmgrouplistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.armGroup)) {
            data["armGroup"] = [];
            for (let item of this.armGroup)
                data["armGroup"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IArmgrouplistDto {
    armGroup?: ArmgroupDto[] | null;
}

export class ArmgroupDto implements IArmgroupDto {
    armGroupLabel?: string | null;
    armGroupDescription?: string | null;

    constructor(data?: IArmgroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.armGroupLabel = _data["armGroupLabel"] !== undefined ? _data["armGroupLabel"] : <any>null;
            this.armGroupDescription = _data["armGroupDescription"] !== undefined ? _data["armGroupDescription"] : <any>null;
        }
    }

    static fromJS(data: any): ArmgroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ArmgroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["armGroupLabel"] = this.armGroupLabel !== undefined ? this.armGroupLabel : <any>null;
        data["armGroupDescription"] = this.armGroupDescription !== undefined ? this.armGroupDescription : <any>null;
        return data; 
    }
}

export interface IArmgroupDto {
    armGroupLabel?: string | null;
    armGroupDescription?: string | null;
}

export class OutcomesmoduleDto implements IOutcomesmoduleDto {
    primaryOutcomeList?: PrimaryoutcomelistDto | null;
    secondaryOutcomeList?: SecondaryoutcomelistDto | null;
    otherOutcomeList?: OtheroutcomelistDto | null;

    constructor(data?: IOutcomesmoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.primaryOutcomeList = _data["primaryOutcomeList"] ? PrimaryoutcomelistDto.fromJS(_data["primaryOutcomeList"]) : <any>null;
            this.secondaryOutcomeList = _data["secondaryOutcomeList"] ? SecondaryoutcomelistDto.fromJS(_data["secondaryOutcomeList"]) : <any>null;
            this.otherOutcomeList = _data["otherOutcomeList"] ? OtheroutcomelistDto.fromJS(_data["otherOutcomeList"]) : <any>null;
        }
    }

    static fromJS(data: any): OutcomesmoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutcomesmoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["primaryOutcomeList"] = this.primaryOutcomeList ? this.primaryOutcomeList.toJSON() : <any>null;
        data["secondaryOutcomeList"] = this.secondaryOutcomeList ? this.secondaryOutcomeList.toJSON() : <any>null;
        data["otherOutcomeList"] = this.otherOutcomeList ? this.otherOutcomeList.toJSON() : <any>null;
        return data; 
    }
}

export interface IOutcomesmoduleDto {
    primaryOutcomeList?: PrimaryoutcomelistDto | null;
    secondaryOutcomeList?: SecondaryoutcomelistDto | null;
    otherOutcomeList?: OtheroutcomelistDto | null;
}

export class PrimaryoutcomelistDto implements IPrimaryoutcomelistDto {
    primaryOutcome?: PrimaryoutcomeDto[] | null;

    constructor(data?: IPrimaryoutcomelistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["primaryOutcome"])) {
                this.primaryOutcome = [] as any;
                for (let item of _data["primaryOutcome"])
                    this.primaryOutcome!.push(PrimaryoutcomeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PrimaryoutcomelistDto {
        data = typeof data === 'object' ? data : {};
        let result = new PrimaryoutcomelistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.primaryOutcome)) {
            data["primaryOutcome"] = [];
            for (let item of this.primaryOutcome)
                data["primaryOutcome"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPrimaryoutcomelistDto {
    primaryOutcome?: PrimaryoutcomeDto[] | null;
}

export class PrimaryoutcomeDto implements IPrimaryoutcomeDto {
    primaryOutcomeMeasure?: string | null;
    primaryOutcomeDescription?: string | null;
    primaryOutcomeTimeFrame?: string | null;

    constructor(data?: IPrimaryoutcomeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.primaryOutcomeMeasure = _data["primaryOutcomeMeasure"] !== undefined ? _data["primaryOutcomeMeasure"] : <any>null;
            this.primaryOutcomeDescription = _data["primaryOutcomeDescription"] !== undefined ? _data["primaryOutcomeDescription"] : <any>null;
            this.primaryOutcomeTimeFrame = _data["primaryOutcomeTimeFrame"] !== undefined ? _data["primaryOutcomeTimeFrame"] : <any>null;
        }
    }

    static fromJS(data: any): PrimaryoutcomeDto {
        data = typeof data === 'object' ? data : {};
        let result = new PrimaryoutcomeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["primaryOutcomeMeasure"] = this.primaryOutcomeMeasure !== undefined ? this.primaryOutcomeMeasure : <any>null;
        data["primaryOutcomeDescription"] = this.primaryOutcomeDescription !== undefined ? this.primaryOutcomeDescription : <any>null;
        data["primaryOutcomeTimeFrame"] = this.primaryOutcomeTimeFrame !== undefined ? this.primaryOutcomeTimeFrame : <any>null;
        return data; 
    }
}

export interface IPrimaryoutcomeDto {
    primaryOutcomeMeasure?: string | null;
    primaryOutcomeDescription?: string | null;
    primaryOutcomeTimeFrame?: string | null;
}

export class SecondaryoutcomelistDto implements ISecondaryoutcomelistDto {
    secondaryOutcome?: SecondaryoutcomeDto[] | null;

    constructor(data?: ISecondaryoutcomelistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["secondaryOutcome"])) {
                this.secondaryOutcome = [] as any;
                for (let item of _data["secondaryOutcome"])
                    this.secondaryOutcome!.push(SecondaryoutcomeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SecondaryoutcomelistDto {
        data = typeof data === 'object' ? data : {};
        let result = new SecondaryoutcomelistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.secondaryOutcome)) {
            data["secondaryOutcome"] = [];
            for (let item of this.secondaryOutcome)
                data["secondaryOutcome"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISecondaryoutcomelistDto {
    secondaryOutcome?: SecondaryoutcomeDto[] | null;
}

export class SecondaryoutcomeDto implements ISecondaryoutcomeDto {
    secondaryOutcomeMeasure?: string | null;
    secondaryOutcomeDescription?: string | null;
    secondaryOutcomeTimeFrame?: string | null;

    constructor(data?: ISecondaryoutcomeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.secondaryOutcomeMeasure = _data["secondaryOutcomeMeasure"] !== undefined ? _data["secondaryOutcomeMeasure"] : <any>null;
            this.secondaryOutcomeDescription = _data["secondaryOutcomeDescription"] !== undefined ? _data["secondaryOutcomeDescription"] : <any>null;
            this.secondaryOutcomeTimeFrame = _data["secondaryOutcomeTimeFrame"] !== undefined ? _data["secondaryOutcomeTimeFrame"] : <any>null;
        }
    }

    static fromJS(data: any): SecondaryoutcomeDto {
        data = typeof data === 'object' ? data : {};
        let result = new SecondaryoutcomeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["secondaryOutcomeMeasure"] = this.secondaryOutcomeMeasure !== undefined ? this.secondaryOutcomeMeasure : <any>null;
        data["secondaryOutcomeDescription"] = this.secondaryOutcomeDescription !== undefined ? this.secondaryOutcomeDescription : <any>null;
        data["secondaryOutcomeTimeFrame"] = this.secondaryOutcomeTimeFrame !== undefined ? this.secondaryOutcomeTimeFrame : <any>null;
        return data; 
    }
}

export interface ISecondaryoutcomeDto {
    secondaryOutcomeMeasure?: string | null;
    secondaryOutcomeDescription?: string | null;
    secondaryOutcomeTimeFrame?: string | null;
}

export class OtheroutcomelistDto implements IOtheroutcomelistDto {
    otherOutcome?: OtheroutcomeDto[] | null;

    constructor(data?: IOtheroutcomelistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["otherOutcome"])) {
                this.otherOutcome = [] as any;
                for (let item of _data["otherOutcome"])
                    this.otherOutcome!.push(OtheroutcomeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OtheroutcomelistDto {
        data = typeof data === 'object' ? data : {};
        let result = new OtheroutcomelistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.otherOutcome)) {
            data["otherOutcome"] = [];
            for (let item of this.otherOutcome)
                data["otherOutcome"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOtheroutcomelistDto {
    otherOutcome?: OtheroutcomeDto[] | null;
}

export class OtheroutcomeDto implements IOtheroutcomeDto {
    otherOutcomeMeasure?: string | null;
    otherOutcomeTimeFrame?: string | null;

    constructor(data?: IOtheroutcomeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.otherOutcomeMeasure = _data["otherOutcomeMeasure"] !== undefined ? _data["otherOutcomeMeasure"] : <any>null;
            this.otherOutcomeTimeFrame = _data["otherOutcomeTimeFrame"] !== undefined ? _data["otherOutcomeTimeFrame"] : <any>null;
        }
    }

    static fromJS(data: any): OtheroutcomeDto {
        data = typeof data === 'object' ? data : {};
        let result = new OtheroutcomeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["otherOutcomeMeasure"] = this.otherOutcomeMeasure !== undefined ? this.otherOutcomeMeasure : <any>null;
        data["otherOutcomeTimeFrame"] = this.otherOutcomeTimeFrame !== undefined ? this.otherOutcomeTimeFrame : <any>null;
        return data; 
    }
}

export interface IOtheroutcomeDto {
    otherOutcomeMeasure?: string | null;
    otherOutcomeTimeFrame?: string | null;
}

export class EligibilitymoduleDto implements IEligibilitymoduleDto {
    eligibilityCriteria?: string | null;
    healthyVolunteers?: string | null;
    gender?: string | null;
    stdAgeList?: StdagelistDto | null;
    studyPopulation?: string | null;
    samplingMethod?: string | null;

    constructor(data?: IEligibilitymoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eligibilityCriteria = _data["eligibilityCriteria"] !== undefined ? _data["eligibilityCriteria"] : <any>null;
            this.healthyVolunteers = _data["healthyVolunteers"] !== undefined ? _data["healthyVolunteers"] : <any>null;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : <any>null;
            this.stdAgeList = _data["stdAgeList"] ? StdagelistDto.fromJS(_data["stdAgeList"]) : <any>null;
            this.studyPopulation = _data["studyPopulation"] !== undefined ? _data["studyPopulation"] : <any>null;
            this.samplingMethod = _data["samplingMethod"] !== undefined ? _data["samplingMethod"] : <any>null;
        }
    }

    static fromJS(data: any): EligibilitymoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new EligibilitymoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eligibilityCriteria"] = this.eligibilityCriteria !== undefined ? this.eligibilityCriteria : <any>null;
        data["healthyVolunteers"] = this.healthyVolunteers !== undefined ? this.healthyVolunteers : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["stdAgeList"] = this.stdAgeList ? this.stdAgeList.toJSON() : <any>null;
        data["studyPopulation"] = this.studyPopulation !== undefined ? this.studyPopulation : <any>null;
        data["samplingMethod"] = this.samplingMethod !== undefined ? this.samplingMethod : <any>null;
        return data; 
    }
}

export interface IEligibilitymoduleDto {
    eligibilityCriteria?: string | null;
    healthyVolunteers?: string | null;
    gender?: string | null;
    stdAgeList?: StdagelistDto | null;
    studyPopulation?: string | null;
    samplingMethod?: string | null;
}

export class StdagelistDto implements IStdagelistDto {
    stdAge?: string[] | null;

    constructor(data?: IStdagelistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["stdAge"])) {
                this.stdAge = [] as any;
                for (let item of _data["stdAge"])
                    this.stdAge!.push(item);
            }
        }
    }

    static fromJS(data: any): StdagelistDto {
        data = typeof data === 'object' ? data : {};
        let result = new StdagelistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.stdAge)) {
            data["stdAge"] = [];
            for (let item of this.stdAge)
                data["stdAge"].push(item);
        }
        return data; 
    }
}

export interface IStdagelistDto {
    stdAge?: string[] | null;
}

export class ContactslocationsmoduleDto implements IContactslocationsmoduleDto {
    overallOfficialList?: OverallofficiallistDto | null;
    locationList?: LocationlistDto | null;

    constructor(data?: IContactslocationsmoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.overallOfficialList = _data["overallOfficialList"] ? OverallofficiallistDto.fromJS(_data["overallOfficialList"]) : <any>null;
            this.locationList = _data["locationList"] ? LocationlistDto.fromJS(_data["locationList"]) : <any>null;
        }
    }

    static fromJS(data: any): ContactslocationsmoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactslocationsmoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["overallOfficialList"] = this.overallOfficialList ? this.overallOfficialList.toJSON() : <any>null;
        data["locationList"] = this.locationList ? this.locationList.toJSON() : <any>null;
        return data; 
    }
}

export interface IContactslocationsmoduleDto {
    overallOfficialList?: OverallofficiallistDto | null;
    locationList?: LocationlistDto | null;
}

export class OverallofficiallistDto implements IOverallofficiallistDto {
    overallOfficial?: OverallofficialDto[] | null;

    constructor(data?: IOverallofficiallistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["overallOfficial"])) {
                this.overallOfficial = [] as any;
                for (let item of _data["overallOfficial"])
                    this.overallOfficial!.push(OverallofficialDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OverallofficiallistDto {
        data = typeof data === 'object' ? data : {};
        let result = new OverallofficiallistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.overallOfficial)) {
            data["overallOfficial"] = [];
            for (let item of this.overallOfficial)
                data["overallOfficial"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOverallofficiallistDto {
    overallOfficial?: OverallofficialDto[] | null;
}

export class OverallofficialDto implements IOverallofficialDto {
    overallOfficialName?: string | null;
    overallOfficialAffiliation?: string | null;
    overallOfficialRole?: string | null;

    constructor(data?: IOverallofficialDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.overallOfficialName = _data["overallOfficialName"] !== undefined ? _data["overallOfficialName"] : <any>null;
            this.overallOfficialAffiliation = _data["overallOfficialAffiliation"] !== undefined ? _data["overallOfficialAffiliation"] : <any>null;
            this.overallOfficialRole = _data["overallOfficialRole"] !== undefined ? _data["overallOfficialRole"] : <any>null;
        }
    }

    static fromJS(data: any): OverallofficialDto {
        data = typeof data === 'object' ? data : {};
        let result = new OverallofficialDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["overallOfficialName"] = this.overallOfficialName !== undefined ? this.overallOfficialName : <any>null;
        data["overallOfficialAffiliation"] = this.overallOfficialAffiliation !== undefined ? this.overallOfficialAffiliation : <any>null;
        data["overallOfficialRole"] = this.overallOfficialRole !== undefined ? this.overallOfficialRole : <any>null;
        return data; 
    }
}

export interface IOverallofficialDto {
    overallOfficialName?: string | null;
    overallOfficialAffiliation?: string | null;
    overallOfficialRole?: string | null;
}

export class LocationlistDto implements ILocationlistDto {
    location?: LocationDto[] | null;

    constructor(data?: ILocationlistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["location"])) {
                this.location = [] as any;
                for (let item of _data["location"])
                    this.location!.push(LocationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LocationlistDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocationlistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.location)) {
            data["location"] = [];
            for (let item of this.location)
                data["location"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILocationlistDto {
    location?: LocationDto[] | null;
}

export class LocationDto implements ILocationDto {
    locationFacility?: string | null;
    locationCity?: string | null;
    locationState?: string | null;
    locationZip?: string | null;
    locationCountry?: string | null;

    constructor(data?: ILocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.locationFacility = _data["locationFacility"] !== undefined ? _data["locationFacility"] : <any>null;
            this.locationCity = _data["locationCity"] !== undefined ? _data["locationCity"] : <any>null;
            this.locationState = _data["locationState"] !== undefined ? _data["locationState"] : <any>null;
            this.locationZip = _data["locationZip"] !== undefined ? _data["locationZip"] : <any>null;
            this.locationCountry = _data["locationCountry"] !== undefined ? _data["locationCountry"] : <any>null;
        }
    }

    static fromJS(data: any): LocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationFacility"] = this.locationFacility !== undefined ? this.locationFacility : <any>null;
        data["locationCity"] = this.locationCity !== undefined ? this.locationCity : <any>null;
        data["locationState"] = this.locationState !== undefined ? this.locationState : <any>null;
        data["locationZip"] = this.locationZip !== undefined ? this.locationZip : <any>null;
        data["locationCountry"] = this.locationCountry !== undefined ? this.locationCountry : <any>null;
        return data; 
    }
}

export interface ILocationDto {
    locationFacility?: string | null;
    locationCity?: string | null;
    locationState?: string | null;
    locationZip?: string | null;
    locationCountry?: string | null;
}

export class ReferencesmoduleDto implements IReferencesmoduleDto {
    referenceList?: ReferencelistDto | null;

    constructor(data?: IReferencesmoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.referenceList = _data["referenceList"] ? ReferencelistDto.fromJS(_data["referenceList"]) : <any>null;
        }
    }

    static fromJS(data: any): ReferencesmoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReferencesmoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referenceList"] = this.referenceList ? this.referenceList.toJSON() : <any>null;
        return data; 
    }
}

export interface IReferencesmoduleDto {
    referenceList?: ReferencelistDto | null;
}

export class ReferencelistDto implements IReferencelistDto {
    reference?: ReferenceDto[] | null;

    constructor(data?: IReferencelistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["reference"])) {
                this.reference = [] as any;
                for (let item of _data["reference"])
                    this.reference!.push(ReferenceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReferencelistDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReferencelistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.reference)) {
            data["reference"] = [];
            for (let item of this.reference)
                data["reference"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReferencelistDto {
    reference?: ReferenceDto[] | null;
}

export class ReferenceDto implements IReferenceDto {
    referencePMID?: string | null;
    referenceType?: string | null;
    referenceCitation?: string | null;

    constructor(data?: IReferenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.referencePMID = _data["referencePMID"] !== undefined ? _data["referencePMID"] : <any>null;
            this.referenceType = _data["referenceType"] !== undefined ? _data["referenceType"] : <any>null;
            this.referenceCitation = _data["referenceCitation"] !== undefined ? _data["referenceCitation"] : <any>null;
        }
    }

    static fromJS(data: any): ReferenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReferenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referencePMID"] = this.referencePMID !== undefined ? this.referencePMID : <any>null;
        data["referenceType"] = this.referenceType !== undefined ? this.referenceType : <any>null;
        data["referenceCitation"] = this.referenceCitation !== undefined ? this.referenceCitation : <any>null;
        return data; 
    }
}

export interface IReferenceDto {
    referencePMID?: string | null;
    referenceType?: string | null;
    referenceCitation?: string | null;
}

export class DerivedsectionDto implements IDerivedsectionDto {
    miscInfoModule?: MiscinfomoduleDto | null;
    conditionBrowseModule?: ConditionbrowsemoduleDto | null;

    constructor(data?: IDerivedsectionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.miscInfoModule = _data["miscInfoModule"] ? MiscinfomoduleDto.fromJS(_data["miscInfoModule"]) : <any>null;
            this.conditionBrowseModule = _data["conditionBrowseModule"] ? ConditionbrowsemoduleDto.fromJS(_data["conditionBrowseModule"]) : <any>null;
        }
    }

    static fromJS(data: any): DerivedsectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new DerivedsectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["miscInfoModule"] = this.miscInfoModule ? this.miscInfoModule.toJSON() : <any>null;
        data["conditionBrowseModule"] = this.conditionBrowseModule ? this.conditionBrowseModule.toJSON() : <any>null;
        return data; 
    }
}

export interface IDerivedsectionDto {
    miscInfoModule?: MiscinfomoduleDto | null;
    conditionBrowseModule?: ConditionbrowsemoduleDto | null;
}

export class MiscinfomoduleDto implements IMiscinfomoduleDto {
    versionHolder?: string | null;

    constructor(data?: IMiscinfomoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.versionHolder = _data["versionHolder"] !== undefined ? _data["versionHolder"] : <any>null;
        }
    }

    static fromJS(data: any): MiscinfomoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new MiscinfomoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["versionHolder"] = this.versionHolder !== undefined ? this.versionHolder : <any>null;
        return data; 
    }
}

export interface IMiscinfomoduleDto {
    versionHolder?: string | null;
}

export class ConditionbrowsemoduleDto implements IConditionbrowsemoduleDto {
    conditionMeshList?: ConditionmeshlistDto | null;
    conditionAncestorList?: ConditionancestorlistDto | null;
    conditionBrowseLeafList?: ConditionbrowseleaflistDto | null;
    conditionBrowseBranchList?: ConditionbrowsebranchlistDto | null;

    constructor(data?: IConditionbrowsemoduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.conditionMeshList = _data["conditionMeshList"] ? ConditionmeshlistDto.fromJS(_data["conditionMeshList"]) : <any>null;
            this.conditionAncestorList = _data["conditionAncestorList"] ? ConditionancestorlistDto.fromJS(_data["conditionAncestorList"]) : <any>null;
            this.conditionBrowseLeafList = _data["conditionBrowseLeafList"] ? ConditionbrowseleaflistDto.fromJS(_data["conditionBrowseLeafList"]) : <any>null;
            this.conditionBrowseBranchList = _data["conditionBrowseBranchList"] ? ConditionbrowsebranchlistDto.fromJS(_data["conditionBrowseBranchList"]) : <any>null;
        }
    }

    static fromJS(data: any): ConditionbrowsemoduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionbrowsemoduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conditionMeshList"] = this.conditionMeshList ? this.conditionMeshList.toJSON() : <any>null;
        data["conditionAncestorList"] = this.conditionAncestorList ? this.conditionAncestorList.toJSON() : <any>null;
        data["conditionBrowseLeafList"] = this.conditionBrowseLeafList ? this.conditionBrowseLeafList.toJSON() : <any>null;
        data["conditionBrowseBranchList"] = this.conditionBrowseBranchList ? this.conditionBrowseBranchList.toJSON() : <any>null;
        return data; 
    }
}

export interface IConditionbrowsemoduleDto {
    conditionMeshList?: ConditionmeshlistDto | null;
    conditionAncestorList?: ConditionancestorlistDto | null;
    conditionBrowseLeafList?: ConditionbrowseleaflistDto | null;
    conditionBrowseBranchList?: ConditionbrowsebranchlistDto | null;
}

export class ConditionmeshlistDto implements IConditionmeshlistDto {
    conditionMesh?: ConditionmeshDto[] | null;

    constructor(data?: IConditionmeshlistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["conditionMesh"])) {
                this.conditionMesh = [] as any;
                for (let item of _data["conditionMesh"])
                    this.conditionMesh!.push(ConditionmeshDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConditionmeshlistDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionmeshlistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.conditionMesh)) {
            data["conditionMesh"] = [];
            for (let item of this.conditionMesh)
                data["conditionMesh"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IConditionmeshlistDto {
    conditionMesh?: ConditionmeshDto[] | null;
}

export class ConditionmeshDto implements IConditionmeshDto {
    conditionMeshId?: string | null;
    conditionMeshTerm?: string | null;

    constructor(data?: IConditionmeshDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.conditionMeshId = _data["conditionMeshId"] !== undefined ? _data["conditionMeshId"] : <any>null;
            this.conditionMeshTerm = _data["conditionMeshTerm"] !== undefined ? _data["conditionMeshTerm"] : <any>null;
        }
    }

    static fromJS(data: any): ConditionmeshDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionmeshDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conditionMeshId"] = this.conditionMeshId !== undefined ? this.conditionMeshId : <any>null;
        data["conditionMeshTerm"] = this.conditionMeshTerm !== undefined ? this.conditionMeshTerm : <any>null;
        return data; 
    }
}

export interface IConditionmeshDto {
    conditionMeshId?: string | null;
    conditionMeshTerm?: string | null;
}

export class ConditionancestorlistDto implements IConditionancestorlistDto {
    conditionAncestor?: ConditionancestorDto[] | null;

    constructor(data?: IConditionancestorlistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["conditionAncestor"])) {
                this.conditionAncestor = [] as any;
                for (let item of _data["conditionAncestor"])
                    this.conditionAncestor!.push(ConditionancestorDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConditionancestorlistDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionancestorlistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.conditionAncestor)) {
            data["conditionAncestor"] = [];
            for (let item of this.conditionAncestor)
                data["conditionAncestor"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IConditionancestorlistDto {
    conditionAncestor?: ConditionancestorDto[] | null;
}

export class ConditionancestorDto implements IConditionancestorDto {
    conditionAncestorId?: string | null;
    conditionAncestorTerm?: string | null;

    constructor(data?: IConditionancestorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.conditionAncestorId = _data["conditionAncestorId"] !== undefined ? _data["conditionAncestorId"] : <any>null;
            this.conditionAncestorTerm = _data["conditionAncestorTerm"] !== undefined ? _data["conditionAncestorTerm"] : <any>null;
        }
    }

    static fromJS(data: any): ConditionancestorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionancestorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conditionAncestorId"] = this.conditionAncestorId !== undefined ? this.conditionAncestorId : <any>null;
        data["conditionAncestorTerm"] = this.conditionAncestorTerm !== undefined ? this.conditionAncestorTerm : <any>null;
        return data; 
    }
}

export interface IConditionancestorDto {
    conditionAncestorId?: string | null;
    conditionAncestorTerm?: string | null;
}

export class ConditionbrowseleaflistDto implements IConditionbrowseleaflistDto {
    conditionBrowseLeaf?: ConditionbrowseleafDto[] | null;

    constructor(data?: IConditionbrowseleaflistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["conditionBrowseLeaf"])) {
                this.conditionBrowseLeaf = [] as any;
                for (let item of _data["conditionBrowseLeaf"])
                    this.conditionBrowseLeaf!.push(ConditionbrowseleafDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConditionbrowseleaflistDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionbrowseleaflistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.conditionBrowseLeaf)) {
            data["conditionBrowseLeaf"] = [];
            for (let item of this.conditionBrowseLeaf)
                data["conditionBrowseLeaf"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IConditionbrowseleaflistDto {
    conditionBrowseLeaf?: ConditionbrowseleafDto[] | null;
}

export class ConditionbrowseleafDto implements IConditionbrowseleafDto {
    conditionBrowseLeafId?: string | null;
    conditionBrowseLeafName?: string | null;
    conditionBrowseLeafAsFound?: string | null;
    conditionBrowseLeafRelevance?: string | null;

    constructor(data?: IConditionbrowseleafDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.conditionBrowseLeafId = _data["conditionBrowseLeafId"] !== undefined ? _data["conditionBrowseLeafId"] : <any>null;
            this.conditionBrowseLeafName = _data["conditionBrowseLeafName"] !== undefined ? _data["conditionBrowseLeafName"] : <any>null;
            this.conditionBrowseLeafAsFound = _data["conditionBrowseLeafAsFound"] !== undefined ? _data["conditionBrowseLeafAsFound"] : <any>null;
            this.conditionBrowseLeafRelevance = _data["conditionBrowseLeafRelevance"] !== undefined ? _data["conditionBrowseLeafRelevance"] : <any>null;
        }
    }

    static fromJS(data: any): ConditionbrowseleafDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionbrowseleafDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conditionBrowseLeafId"] = this.conditionBrowseLeafId !== undefined ? this.conditionBrowseLeafId : <any>null;
        data["conditionBrowseLeafName"] = this.conditionBrowseLeafName !== undefined ? this.conditionBrowseLeafName : <any>null;
        data["conditionBrowseLeafAsFound"] = this.conditionBrowseLeafAsFound !== undefined ? this.conditionBrowseLeafAsFound : <any>null;
        data["conditionBrowseLeafRelevance"] = this.conditionBrowseLeafRelevance !== undefined ? this.conditionBrowseLeafRelevance : <any>null;
        return data; 
    }
}

export interface IConditionbrowseleafDto {
    conditionBrowseLeafId?: string | null;
    conditionBrowseLeafName?: string | null;
    conditionBrowseLeafAsFound?: string | null;
    conditionBrowseLeafRelevance?: string | null;
}

export class ConditionbrowsebranchlistDto implements IConditionbrowsebranchlistDto {
    conditionBrowseBranch?: ConditionbrowsebranchDto[] | null;

    constructor(data?: IConditionbrowsebranchlistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["conditionBrowseBranch"])) {
                this.conditionBrowseBranch = [] as any;
                for (let item of _data["conditionBrowseBranch"])
                    this.conditionBrowseBranch!.push(ConditionbrowsebranchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConditionbrowsebranchlistDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionbrowsebranchlistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.conditionBrowseBranch)) {
            data["conditionBrowseBranch"] = [];
            for (let item of this.conditionBrowseBranch)
                data["conditionBrowseBranch"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IConditionbrowsebranchlistDto {
    conditionBrowseBranch?: ConditionbrowsebranchDto[] | null;
}

export class ConditionbrowsebranchDto implements IConditionbrowsebranchDto {
    conditionBrowseBranchAbbrev?: string | null;
    conditionBrowseBranchName?: string | null;

    constructor(data?: IConditionbrowsebranchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.conditionBrowseBranchAbbrev = _data["conditionBrowseBranchAbbrev"] !== undefined ? _data["conditionBrowseBranchAbbrev"] : <any>null;
            this.conditionBrowseBranchName = _data["conditionBrowseBranchName"] !== undefined ? _data["conditionBrowseBranchName"] : <any>null;
        }
    }

    static fromJS(data: any): ConditionbrowsebranchDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionbrowsebranchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conditionBrowseBranchAbbrev"] = this.conditionBrowseBranchAbbrev !== undefined ? this.conditionBrowseBranchAbbrev : <any>null;
        data["conditionBrowseBranchName"] = this.conditionBrowseBranchName !== undefined ? this.conditionBrowseBranchName : <any>null;
        return data; 
    }
}

export interface IConditionbrowsebranchDto {
    conditionBrowseBranchAbbrev?: string | null;
    conditionBrowseBranchName?: string | null;
}

export class FullStudyViewDto implements IFullStudyViewDto {
    nctId?: string | null;
    title?: string | null;
    organizationName?: string | null;
    status?: Status | null;
    briefSummary?: string | null;
    location?: LocationDto | null;

    constructor(data?: IFullStudyViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nctId = _data["nctId"] !== undefined ? _data["nctId"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.organizationName = _data["organizationName"] !== undefined ? _data["organizationName"] : <any>null;
            this.status = _data["status"] ? Status.fromJS(_data["status"]) : <any>null;
            this.briefSummary = _data["briefSummary"] !== undefined ? _data["briefSummary"] : <any>null;
            this.location = _data["location"] ? LocationDto.fromJS(_data["location"]) : <any>null;
        }
    }

    static fromJS(data: any): FullStudyViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new FullStudyViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nctId"] = this.nctId !== undefined ? this.nctId : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["organizationName"] = this.organizationName !== undefined ? this.organizationName : <any>null;
        data["status"] = this.status ? this.status.toJSON() : <any>null;
        data["briefSummary"] = this.briefSummary !== undefined ? this.briefSummary : <any>null;
        data["location"] = this.location ? this.location.toJSON() : <any>null;
        return data; 
    }
}

export interface IFullStudyViewDto {
    nctId?: string | null;
    title?: string | null;
    organizationName?: string | null;
    status?: Status | null;
    briefSummary?: string | null;
    location?: LocationDto | null;
}

export abstract class Enumeration implements IEnumeration {
    value?: string | null;
    description?: string | null;

    constructor(data?: IEnumeration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): Enumeration {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Enumeration' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data; 
    }
}

export interface IEnumeration {
    value?: string | null;
    description?: string | null;
}

export class Status extends Enumeration implements IStatus {

    constructor(data?: IStatus) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): Status {
        data = typeof data === 'object' ? data : {};
        let result = new Status();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IStatus extends IEnumeration {
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}